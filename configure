#!/usr/bin/env gosh
;; Configuring Gauche-rfc-jwt
;; Run ./configure (or gosh ./configure) to generate Makefiles.

(use file.util)
(use gauche.mop.singleton)
(use gauche.configure)

;; Here you can define handlers of configure arguments by cf-arg-enable
;; and cf-arg-with.  Note that --with-local is handled implicitly if you use
;; cf-init-gauche-extension.

(define (my-prepend-lib*-ldflags package)
  (^ [arg]
    (unless (file-exists? arg)
      (format #t "~a not found.\n")
      (exit 1))
    (cf-subst-prepend 'LDFLAGS arg)))

(cf-arg-enable
 'esdsa
 "  \
  --enable-esdsa          Use ESDSA digest.
  --disable-esdsa         Do not use ESDSA digest.
"
 )

(cf-arg-with
 'libssl
 "  --with-libssl=PATH      Use Openssl devkit installed under PATH."
 (my-prepend-lib*-ldflags 'libssl))

(cf-arg-with
 'libcrypto
 "  --with-libcrypto=PATH   Use Openssl devkit installed under PATH."
 (my-prepend-lib*-ldflags 'libcrypto))

;; Initialize configure.  This creates the global context, parses
;; command-line args and sets up default values.
(cf-init-gauche-extension)

;; Here you can add feature tests and other cf-define's.

(define (ensure-subst symbol)
  (unless (cf-have-subst? symbol)
    (cf-subst symbol "")))

;; These subsutitutions come from environment. Maybe empty.
(ensure-subst 'LIBS)
(ensure-subst 'LDFLAGS)
(ensure-subst 'ARCH_LIBSSL_DEPENDS)
(ensure-subst 'SCM_LIBSSL_DEPENDS)
(ensure-subst 'TEST_LIBSSL_DEPENDS)

(cond
 [(member (cf-feature-ref 'esdsa) '(#f "yes"))
  (cf-check-headers '("openssl/conf.h"))
  (cf-check-headers '("openssl/ec.h"))

  ;; Checking early entry point FN of LIB

  (unless (cf-package-ref 'libcrypto)
    (cf-check-lib "crypto" "NCONF_new"))
  (unless (cf-package-ref 'libssl)
    (cf-check-lib "ssl" "EC_KEY_new"))
  (cf-subst-append 'ARCH_LIBSSL_DEPENDS "rfc--jwtec.$(SOEXT)")
  (cf-subst-append 'SCM_LIBSSL_DEPENDS "$(srcdir)/rfc/jwt/ecdsa.scm")
  (cf-subst-append 'TEST_LIBSSL_DEPENDS "$(srcdir)/test-ecdsa.scm")
  (cf-subst 'ECDSA_SCM_BODY (file->string "./rfc/jwt/ecdsa-body.scm"))]
 [else
  (cf-subst 'ECDSA_SCM_BODY (file->string "./rfc/jwt/ecdsa-void.scm"))])

;; Output
(cf-output-default)
(cf-output "./rfc/jwt/ecdsa.scm")

;; Local variables:
;; mode: scheme
;; end:

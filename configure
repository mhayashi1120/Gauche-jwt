#!/usr/bin/env gosh
;; Configuring Gauche-jwt
;; Run ./configure (or gosh ./configure) to generate Makefiles.

;; TODO
(debug-print-width #f)

(use gauche.mop.singleton)
(use gauche.configure)

;; Here you can define handlers of configure arguments by cf-arg-enable
;; and cf-arg-with.  Note that --with-local is handled implicitly if you use
;; cf-init-gauche-extension.

(define my-activate-libssl #t)
(define my-with-packages '())

(define (my-prepend-lib*-ldflags package)
  (^ [arg]
    (push! my-with-packages package)
    (cf-subst-prepend 'LDFLAGS arg)))

(cf-arg-enable
 'esdsa
 "  \
  --enable-esdsa          Use ESDSA digest.
  --disable-esdsa         Do not use ESDSA digest.
"
 (^[val] (and (string=? val "no") (set! my-activate-libssl #f))))

(cf-arg-with
 'libssl
 "  --with-libssl=PATH      Use Openssl devkit installed under PATH."
 (my-prepend-lib*-ldflags 'libssl))

(cf-arg-with
 'libcrypto
 "  --with-libcrypto=PATH   Use Openssl devkit installed under PATH."
 (my-prepend-lib*-ldflags 'libcrypto))

;; Initialize configure.  This creates the global context, parses
;; command-line args and sets up default values.
(cf-init-gauche-extension)

;; Here you can add feature tests and other cf-define's.
(cf-lang (instance-of <c-language>))

(cf-subst 'LIBS "")

(when my-activate-libssl
  (cf-check-headers '("openssl/conf.h"))
  (cf-check-headers '("openssl/ec.h"))

  ;; Early entry point of FN
  (unless (memq 'libcrypto my-with-packages)
    (cf-check-lib "crypto" "NCONF_new"))
  (unless (memq 'libssl my-with-packages)
    (cf-check-lib "ssl" "EC_KEY_new")))

;; Output
(cf-output-default)

;; Local variables:
;; mode: scheme
;; end:

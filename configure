#!/usr/bin/env gosh
;; Configuring Gauche-rfc-jwt
;; Run ./configure (or gosh ./configure) to generate Makefiles.

(use srfi-13)
(use gauche.configure)

(load "configure-compat"
      :paths `(,(sys-dirname (current-load-path)))
      :error-if-not-found #f)

(define (errmsg fmt . args)
  (apply format (current-error-port) fmt args))

(use file.util)

;; Here you can define handlers of configure arguments by cf-arg-enable
;; and cf-arg-with.  Note that --with-local is handled implicitly if you use
;; cf-init-gauche-extension.

($ cf-arg-enable 'ecdsa
   "  \
  --enable-ecdsa          Use ECDSA digest.
  --disable-ecdsa         Do not use ECDSA digest.
"
   )

($ cf-arg-enable 'werror
   "  \
  --enable-werror         Append -Werror option to C compiler
  --disable-werror        Default behavior
")

(let1 validate!
    (^ [arg]
      (unless (file-exists? arg)
        (errmsg "~a not found.\n" arg)
        (exit 1)))

  ($ cf-arg-with 'crypto
     "  --with-crypto=PATH   Use Openssl devkit installed under PATH.
"
     validate!))

;; Initialize configure.  This creates the global context, parses
;; command-line args and sets up default values.
(cf-init-gauche-extension)

;; Here you can add feature tests and other cf-define's.

;; -> <void>
(define (ensure-subst! symbol)
  (unless (cf-have-subst? symbol)
    (cf-subst symbol "")))

;; -> <string>
(define (file$ path)
  (string-trim-both (file->string path)))

;; These subsutitutions come from environment. Maybe empty.
(ensure-subst! 'ARCH_LIBSSL_DEPENDS)
(ensure-subst! 'SCM_LIBSSL_DEPENDS)
(ensure-subst! 'TEST_LIBSSL_DEPENDS)

(let ([ecdsa (cf-feature-ref 'ecdsa)]
      [failed! (^a (errmsg "Not found ~a\n" a)
                   (exit 1))])

  (unless ecdsa
    ($ cf-check-headers '("openssl/evp.h")
       :if-found (^_ (set! ecdsa #t))
       :if-not-found (^_ (set! ecdsa "no"))))

  (when (equal? ecdsa "yes")
    ($ cf-check-headers '("openssl/evp.h")
       :if-not-found failed!)
    (set! ecdsa #t))

  (cond
   [(equal? ecdsa "no")
    (cf-subst 'ECDSA_SCM_BODY (file$ "./rfc/jwt/ecdsa-void.scm"))]
   [ecdsa

    ;; Checking early entry point FN of LIB
    (cond
     [(cf-package-ref 'crypto) =>
      (^p (cf-subst-prepend 'LIBS #"-l~|p|"))]
     [else
      ($ cf-check-lib "crypto" "EVP_PKEY_new"
         :if-not-found failed!)])

    (cf-subst-append 'ARCH_LIBSSL_DEPENDS "$(srcdir)/$(ECLIB_BIN_NAME)")
    (cf-subst-append 'SCM_LIBSSL_DEPENDS "$(srcdir)/rfc/jwt/ecdsa.scm")
    (cf-subst-append 'TEST_LIBSSL_DEPENDS "$(srcdir)/__tests__/ecdsa-0001.scm")
    (cf-subst 'ECDSA_SCM_BODY (file$ "./rfc/jwt/ecdsa-body.scm"))]))

(and-let* ([werror (cf-feature-ref 'werror)]
           [(equal? werror "yes")])
  (cf-subst-append 'CFLAGS "-Werror"))

;; Output
(cf-output-default)
(cf-output "./rfc/jwt/ecdsa.scm")

;; Local variables:
;; mode: scheme
;; end:
